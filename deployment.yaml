apiVersion: apps/v1
kind: Deployment
metadata:
  name: blazorapp-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: blazorapp
  template:
    metadata:
      labels:
        app: blazorapp
    spec:
      containers:
        - name: blazorapp
          image: blazorapp1:latest
          imagePullPolicy: Never
          ports:
            - containerPort: 8080
          volumeMounts:
            - mountPath: "/app/keys"
              name: dataprotection-storage
      volumes:
        - name: dataprotection-storage
          persistentVolumeClaim:
            claimName: blazorapp-dataprotection-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: efc-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: efc
  template:
    metadata:
      labels:
        app: efc
    spec:
      containers:
        - name: efc
          image: efc:latest  # Replace with your built image
          imagePullPolicy: Never
          ports:
            - containerPort: 3306  # Adjust for database if needed
          env:
            - name: DATABASE_PATH
              value: "/app/data/database.sqlite"
          volumeMounts:
            - name: data-volume
              mountPath: /app/data
      volumes:
        - name: data-volume
          emptyDir: {}  # Can be replaced with a Persistent Volume Claim (PVC)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapplication3-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: webapplication3
  template:
    metadata:
      labels:
        app: webapplication3
    spec:
      containers:
        - name: webapplication3
          image: webapplication3:latest  # Replace with the correct image name
          imagePullPolicy: Never
          ports:
            - containerPort: 8080
            - containerPort: 8081
          env:
            - name: DOTNET_RUNNING_IN_CONTAINER
              value: "true"
