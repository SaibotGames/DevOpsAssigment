@page "/EditPost/{postID}"
@using BlazorApp1.Services
@using dto
@inject IPostService PostService;
@inject NavigationManager NavMgr;
<h3>Edit Post</h3>

<label>Title: </label> <input type="text" @bind="@title" @bind:event="oninput"/>
<br/>
<label>Body: </label>
<textarea @bind="@bodyText" rows="10" cols="50" @bind:event="oninput"></textarea>
<br/>
<button @onclick="Update" disabled="@isButtonDisabled">Edit</button>
<button @onclick="Delete">Delete</button>
@if (!string.IsNullOrEmpty(errorLabel))
{
<label style="color: red"> @errorLabel </label>
}
@code {
    [Parameter] public string postId { get; set; }
    private string title;
    private string bodyText;
    private string errorLabel;
    private PostDto selectedPost { get; set; }

    private bool isButtonDisabled => string.IsNullOrEmpty(title) || string.IsNullOrEmpty(bodyText);

    private async Task Delete()
    {
        try
        {
            await PostService.DeletePostAsync(int.Parse(postId));
        }
        catch (Exception e)
        {
            errorLabel = $"Error: {e.Message}";
        }
        NavMgr.NavigateTo("/Posts");
    }

    private async Task Update()
    {
        try
        {
            UpdatePostDto newPost = new UpdatePostDto()
            {
                PostTitle = title,
                PostContent = bodyText
            };
            await PostService.UpdatePostAsync(newPost, int.Parse(postId));
            NavMgr.NavigateTo($"/PostDetails/{postId}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        selectedPost = await PostService.GetPostAsync(int.Parse(postId));
        title = selectedPost.PostTitle;
        bodyText = selectedPost.PostContent;
    }

}